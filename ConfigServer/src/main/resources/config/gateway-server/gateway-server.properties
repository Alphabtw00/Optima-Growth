
#_______________________________________________#EUREKA CONFIG-->>_____________________________________________________#

#if wanna use ip instead of application name
eureka.instance.prefer-ip-address=true

#url(s) of eureka servers we need to add to
eureka.client.service-url.defaultZone=http://eurekaServer:8071/eureka/
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#










#________________________________________________#SERVICE CONFIG-->>___________________________________________________#

server.port=8072
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#











#________________________________________________#CUSTOM CONFIGS-->>___________________________________________________#


#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#















#_______________________________________________#GATEWAY CONFIG-->>____________________________________________________#

#STATIC ROUTES:--

#AUTO EUREKA ROUTE MAPPING:-
#to enable auto service locator by eureka
# spring.cloud.gateway.discovery.locator.enabled=true
#service-ids converted to lower case
# spring.cloud.gateway.discovery.locator.lower-case-service-id=true



#TO CHANGE AUTO EUREKA ROUTE MAPPING:-
#to enable auto service locator by eureka(remove if just want custom manual mapping)(if true then both customn mapping and naming service will work)
spring.cloud.gateway.discovery.locator.enabled=true

#service-ids converted to lower case(remove if just want custom manual mapping)
spring.cloud.gateway.discovery.locator.lower-case-service-id=true




#ORGANIZATION SERVICE ROUTES:-
#unique identifier for the first route([0])
spring.cloud.gateway.routes[0].id=organization-service

#url of the service automatically(load balanced aswell)
spring.cloud.gateway.routes[0].uri=lb://organization-service

#will accept this url and map it as uri mentioned above
spring.cloud.gateway.routes[0].predicates[0]=Path=/organization/**

#removes /organization part of the url when sending it to organization service
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/organization/(?<path>.*), /${path}




#LICENSING SERVICE ROUTES:-
# Unique identifier for the second route ([1])
spring.cloud.gateway.routes[1].id=licensing-service

# URL of the service (gateway uses load balancer to send these requests)
spring.cloud.gateway.routes[1].uri=lb://licensing-service

# Will accept this URL and map it as URI mentioned above
spring.cloud.gateway.routes[1].predicates[0]=Path=/license/**

# Removes /license part of the URL when sending it to licensing service
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/license/(?<path>.*), /${path}





#by default it removes all 3 things (including access tokens) from headers so to have one we gotta disable other 2
spring.cloud.gateway.default-filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.default-filters[1]=RemoveRequestHeader=Set-Cookie
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#ACTUATOR CONFIG-->>_________________________________________________#

#all actuator endpoints exposed
management.endpoints.web.exposure.include=*

#actuator endpoints exposed when running app
management.endpoints.enabled-by-default= true
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#ADMIN-SERVER CONFIG-->>_____________________________________________#

#confugire client to admin server running on port 8073(doesnt work on springboot 3.2.0)
spring.boot.admin.client.url=http://adminServer:8073

#as admin server is secured we need to send info from client to authenticate
spring.boot.admin.client.username={cipher}1e95da2a3a3b7a6b33197a98f55330bb17dd1fb33422c06161b51d173fd0d4b7
spring.boot.admin.client.password={cipher}2ef0a5915e6f55d4989a941c2f091725253f22197f8bf11cd5c07d37173751d9

#client url(as client wont know its own admin client port if running in docker)
spring.boot.admin.client.instance.service-base-url=http://gatewayServer:8072
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#







#______________________________________________#MICROMETER CONFIG-->>__________________________________________________#

#to trace all calls (micrometer only does 10% of calls by default)
management.tracing.sampling.probability=1.0

#to add trace and span id in all logs (isnt done by default)
logging.pattern.level= "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

#send tracing data to zipkin at this endpoint
management.zipkin.tracing.endpoint= http://zipkin:9411/api/v2/spans
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#
