#_______________________________________________#EUREKA CONFIG-->>______________________________________________________

#if wanna use ip instead of application name
eureka.instance.prefer-ip-address=true

#url(s) of eureka servers we need to add to
eureka.client.service-url.defaultZone=http://eurekaServer:8071/eureka/
##_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x___________________________________________






#________________________________________________#SERVICE CONFIG-->>____________________________________________________

server.port=8091

##_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x___________________________________________










#________________________________________________#CUSTOM CONFIGS-->>___________________________________________________#


#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#












#________________________________________________#DATABSE CONFIG-->>____________________________________________________

#doesn't update schemas automatically
spring.jpa.hibernate.ddl-auto= update

#show sql commands run in console
spring.jpa.show-sql= true

#type of database we are using
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

#type of JDBC driver(not needed in springboot3)
spring.datasource.driver-class-name=org.postgresql.Driver




#check if idle connections are still working
#spring.datasource.tomcat.test-while-idle=true
#query to check idle connections and validations
#spring.datasource.tomcat.validation-query=SELECT 1
##_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x___________________________________________








#_________________________________________________#ACTUATOR CONFIG-->>__________________________________________________

#all actuator endpoints exposed
management.endpoints.web.exposure.include=*

#actuator endpoints exposed when running app
management.endpoints.enabled-by-default= true
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#











#_________________________________________________#ADMIN-SERVER CONFIG-->>_____________________________________________#

#confugire client to admin server running on port 8073(doesnt work on springboot 3.2.0)
spring.boot.admin.client.url=http://adminServer:8073

#as admin server is secured we need to send info from client to authenticate
spring.boot.admin.client.username={cipher}1e95da2a3a3b7a6b33197a98f55330bb17dd1fb33422c06161b51d173fd0d4b7
spring.boot.admin.client.password={cipher}2ef0a5915e6f55d4989a941c2f091725253f22197f8bf11cd5c07d37173751d9

#client url(as client wont know its own admin client port if running in docker)
spring.boot.admin.client.instance.service-base-url=http://organization-service:8091
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#______________________________________________#OAUTH SECURITY CONFIG-->>______________________________________________#

#url to keycloak realm
spring.security.oauth2.resourceserver.jwt.issuer-uri= http://keycloak:8080/realms/alpha-realm

#url of where spring access public keys to verify jwt from authorization server(keycloak)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri= ${spring.security.oauth2.resourceserver.jwt.issuer-uri}\
  /protocol/openid-connect/certs




#CUSTOM CLASS JwtAuthConverterProperties PROPERTIES:-
#client name set in keycloak
jwt.auth.converter.resource-id= {cipher}a4ddb583e54a6ee521bbb30d6f428066711b1101851fb72acd73f49427003a55

#attribute in jwt token to identify the user accessing the service(validate the access token)
jwt.auth.converter.principal-attribute= preferred_username
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#SPRING CLOUD STREAM(KAFKA) CONFIG-->>_______________________________#

#connect to kafka broker running at that port(9092) in our localhost
spring.cloud.stream.kafka.binder.brokers= kafka:9092

#connecting our binder source(output channel) to kafka topic (orgChangeTopic)
spring.cloud.stream.bindings.producer.destination={cipher}056703130e2627dba5dfb9cdd8440ed4d47f6b5de1b246d31ebe0e1044e85419
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#






#______________________________________________#MICROMETER CONFIG-->>__________________________________________________#

#to trace all calls (micrometer only does 10% of calls by default)
management.tracing.sampling.probability=1.0

#to add trace and span id in all logs (isnt done by default)
logging.pattern.level= "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

#send tracing data to zipkin at this endpoint
management.zipkin.tracing.endpoint= http://zipkin:9411/api/v2/spans
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#

