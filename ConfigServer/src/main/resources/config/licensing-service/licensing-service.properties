
#________________________________________________#SERVICE CONFIG-->>___________________________________________________#

server.port=8090
example.property=hello

#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#











#_______________________________________________#EUREKA CONFIG-->>_____________________________________________________#

#if wanna use ip indtead of hostname(localhost default value)
eureka.instance.prefer-ip-address=true

#url(s) of eureka servers we need to add to
eureka.client.service-url.defaultZone=http://eurekaServer:8071/eureka/
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#













#________________________________________________#CUSTOM CONFIGS-->>___________________________________________________#


#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#











#________________________________________________#DATABSE CONFIG-->>___________________________________________________#

#doesn't update schemas automatically
spring.jpa.hibernate.ddl-auto= update

#show sql commands run in console
spring.jpa.show-sql= true

#type of database we are using
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

#type of JDBC driver(not needed in springboot3)
spring.datasource.driver-class-name=org.postgresql.Driver





#check if idle connections are still working
#spring.datasource.tomcat.test-while-idle=true
#query to check idle connections and validations
#spring.datasource.tomcat.validation-query=SELECT 1
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#ACTUATOR CONFIG-->>_________________________________________________#

#all actuator endpoints exposed
management.endpoints.web.exposure.include=*

#actuator endpoints exposed when running app
management.endpoints.enabled-by-default= true
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#ADMIN-SERVER CONFIG-->>_____________________________________________#

#confugire client to admin server running on port 8073(doesnt work on springboot 3.2.0)
spring.boot.admin.client.url=http://adminServer:8073

#as admin server is secured we need to send info from client to authenticate
spring.boot.admin.client.username={cipher}1e95da2a3a3b7a6b33197a98f55330bb17dd1fb33422c06161b51d173fd0d4b7
spring.boot.admin.client.password={cipher}2ef0a5915e6f55d4989a941c2f091725253f22197f8bf11cd5c07d37173751d9

#client url(as client wont know its own admin client port if running in docker)
spring.boot.admin.client.instance.service-base-url=http://licensing-service:8090
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#













#______________________________________________#CIRCUIT BREAKER CONFIG-->>_____________________________________________#

#CIRCUITBREAKER ACTUATOR CONFIG:-
#to show Circuit Breaker status in actuator/health
management.health.circuitbreakers.enabled=true

#to show details in /health endpoint
management.endpoint.health.show-details=always





#LICENSE-SERVICE-CIRCUIT-BREAKER CONFIG:-
#shows config in actuator/health
resilience4j.circuitbreaker.instances.licenseService.register-health-indicator=true

#number of calls before it decides the rate of calls in closed state(closed state ring buffer size)
resilience4j.circuitbreaker.instances.licenseService.minimum-number-of-calls=5

#number of calls before it decides the rate of calls in half-open state(half-open state ring buffer size)
resilience4j.circuitbreaker.instances.licenseService.permitted-number-of-calls-in-half-open-state=3

#does it automatically so no need to set it
resilience4j.circuitbreaker.instances.licenseService.automatic-transition-from-open-to-half-open-enabled=true

#if failure calls in the ring buffer are above this threshold (in percentage) it will open
resilience4j.circuitbreaker.instances.licenseService.failure-rate-threshold=50

#if slow calls in the ring buffer are above this threshold (in percentage) it will open
resilience4j.circuitbreaker.instances.licenseService.slow-call-rate-threshold=90

#time in seconds to wait in open state until it goes to half open state
resilience4j.circuitbreaker.instances.licenseService.wait-duration-in-open-state=10s






#ORGANIZATION-SERVICE-CIRCUIT BREAKER CONFIG:-
#shows config in actuator/health
resilience4j.circuitbreaker.instances.organizationService.register-health-indicator=true

#number of calls before it decides the rate of calls(closed state ring buffer size)
resilience4j.circuitbreaker.instances.organizationService.minimum-number-of-calls=6

#number of calls before it decides the rate of calls in half-open state(half-open state ring buffer size)
resilience4j.circuitbreaker.instances.organizationService.permitted-number-of-calls-in-half-open-state=4

#time in seconds to wait in open state until it goes to half open state
resilience4j.circuitbreaker.instances.organizationService.wait-duration-in-open-state=20

#if failure calls in the ring buffer are above this threshold (in percentage) it will open
resilience4j.circuitbreaker.instances.organizationService.failure-rate-threshold=60

#if slow calls in the ring buffer are above this threshold (in percentage) it will open
resilience4j.circuitbreaker.instances.organizationService.slow-call-rate-threshold=90
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#______________________________________________#BULKHEAD CONFIG-->>____________________________________________________#

#enable bulkhead metrics in actuator endpoints(/health doesnt have bulkhead info like others)
resilience4j.bulkhead.metrics.enabled=true



#SEMAPHORE PATTERN BULKHEAD:-
#limiting concurrent calls to the service
resilience4j.bulkhead.instances.licenseService.max-concurrent-calls=20

#seconds the call wait will wait to access the resource (if not then BulkheadFullException error)
resilience4j.bulkhead.instances.licenseService.max-wait-duration=10ms





#THREAD-POOL PATTERN BULKHEAD:-(if wanna use)
#number of threads we wanna use in threadpool for this service
#resilience4j.thread-pool-bulkhead.instances.licenseService.max-thread-pool-size=1
#queue capacity for extra calls that arent active
#resilience4j.thread-pool-bulkhead.instances.licenseService.queue-capacity=1
#number of core threads(alive threads even when no calls are coming) we wanna use in thread pool for this service
#resilience4j.thread-pool-bulkhead.instances.licenseService.core-thread-pool-size=1
#time after which threads not in core size thread pool will be killed
#resilience4j.thread-pool-bulkhead.instances.licenseService.keep-alive-duration=20ms
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#








#______________________________________________#RETRY CONFIG-->>_______________________________________________________#

#retry attempts
resilience4j.retry.instances.licenseService.max-attempts=4

#wait time in seconds before each retry
resilience4j.retry.instances.licenseService.wait-duration=10000
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#______________________________________________#OAUTH SECURITY CONFIG-->>______________________________________________#

#url to keycloak realm
spring.security.oauth2.resourceserver.jwt.issuer-uri= http://keycloak:8080/realms/alpha-realm

#url of where spring access public keys to verify jwt from authorization server(keycloak)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri= ${spring.security.oauth2.resourceserver.jwt.issuer-uri}\
  /protocol/openid-connect/certs





#CUSTOM CLASS JwtAuthConverterProperties PROPERTIES:-
#client name set in keycloak
jwt.auth.converter.resource-id= {cipher}a4ddb583e54a6ee521bbb30d6f428066711b1101851fb72acd73f49427003a55

#attribute in jwt token to identify the user accessing the service(validate the access token)
jwt.auth.converter.principal-attribute= preferred_username

#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#









#_________________________________________________#SPRING CLOUD STREAM(KAFKA) CONFIG-->>_______________________________#

#to add consumer as a function to tell spring cloud stream
spring.cloud.function.definition=consumer

#connect to kafka broker running at that port(9092) in our localhost
spring.cloud.stream.kafka.binder.brokers=kafkat:9092

#binding our function(consumer)(input channel) to kafka topic(orgChangeTopic)
spring.cloud.stream.bindings.consumer-in-0.destination={cipher}056703130e2627dba5dfb9cdd8440ed4d47f6b5de1b246d31ebe0e1044e85419

#adds this consumer to the group(licensingGroup)
spring.cloud.stream.bindings.comsumer-in-0.group=licensingGroup
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#








#______________________________________________#REDIS CONFIG-->>_______________________________________________________#

#properties for custom class use to connect to redis via jedis
redis.server = redis
redis.port = 6379




#use these whe using lettuce connector(spring uses lettuce by default and in that you dont need to make redisConnectionFactory)
#spring.data.redis.host=localhost
#spring.data.redis.port=6379
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#






#______________________________________________#MICROMETER CONFIG-->>__________________________________________________#

#to trace all calls (micrometer only does 10% of calls by default)(switch to 0.1 in production)
management.tracing.sampling.probability=1.0

#to add trace and span id in all logs(isnt done by default)
logging.pattern.level= "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

#send tracing data to zipkin at this endpoint
management.zipkin.tracing.endpoint= http://zipkin:9411/api/v2/spans
#_____________________________________________x_x_x_x_x_x_x_x_x_x_x_x_x_x_x_x__________________________________________#







